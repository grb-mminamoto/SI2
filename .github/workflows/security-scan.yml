name: Security Scan (SAST)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  codeql-scan:
    name: CodeQL Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Configurar CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          queries: security-extended,security-and-quality
          build-mode: manual  # üö® For√ßando modo manual para evitar erro de autobuild
          source-root: .
          ram: 4096

      - name: Criar diret√≥rio de libs e baixar depend√™ncias
        run: |
          mkdir -p libs
          wget -q https://repo1.maven.org/maven2/javax/servlet/javax.servlet-api/4.0.1/javax.servlet-api-4.0.1.jar -P libs/
          wget -q https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.15.2/jackson-databind-2.15.2.jar -P libs/
          wget -q https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.33/mysql-connector-java-8.0.33.jar -P libs/

      - name: Detectar ferramenta de build e compilar
        run: |
          set -e  # Aborta execu√ß√£o em caso de erro
          echo "üèóÔ∏è Detectando ferramenta de build..."
          
          if [ -f "pom.xml" ]; then
            echo "üõ†Ô∏è Maven detectado. Resolvendo depend√™ncias..."
            mvn dependency:resolve || { echo "‚ùå Erro ao resolver depend√™ncias"; exit 1; }
            echo "üì¶ Executando mvn clean compile..."
            mvn clean compile || { echo "‚ùå Erro de compila√ß√£o"; exit 1; }
          
          elif [ -f "build.gradle" ] || [ -f "settings.gradle" ]; then
            echo "üõ†Ô∏è Gradle detectado. Configurando permiss√µes..."
            chmod +x gradlew
            echo "üì¶ Executando ./gradlew classes..."
            ./gradlew classes || { echo "‚ùå Erro de compila√ß√£o"; exit 1; }

          elif ls *.java 1> /dev/null 2>&1; then
            echo "üõ†Ô∏è Java puro detectado. Compilando com javac..."
            mkdir -p bin
            find . -name "*.java" > sources.txt
            javac -cp .:libs/* -d bin @sources.txt || { echo "‚ùå Erro de compila√ß√£o"; exit 1; }

          else
            echo "üö® Nenhuma ferramenta de build detectada! Abortando..."
            exit 1
          fi

      - name: Rodar an√°lise CodeQL
        uses: github/codeql-action/analyze@v3
        with:
          category: "/security-and-quality"


  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Instalar e atualizar Semgrep
        run: |
          pip install --upgrade semgrep
          
      - name: Verificar instala√ß√£o do Semgrep
        run: semgrep --version

      - name: Rodar Semgrep com regras de seguran√ßa
        run: semgrep --config=p/security-audit --exclude '**/.git/**' --verbose --error

      - name: Rodar Semgrep com regras personalizadas
        run: semgrep --config=./semgrep-rules --exclude '**/.git/**' --include '**/*.java' --verbose .

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Instalar a vers√£o mais recente do Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y curl wget jq
          
          # Buscar a vers√£o mais recente no GitHub Releases
          TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | jq -r '.tag_name' | sed 's/v//')
          if [ -z "$TRIVY_VERSION" ]; then
            echo "Falha ao obter a vers√£o mais recente do Trivy."
            exit 1
          fi
          echo "Instalando Trivy vers√£o $TRIVY_VERSION..."
          wget -q https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
          tar -xzf trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/
          rm -f trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
      - name: Verificar instala√ß√£o do Trivy
        run: trivy --version

      - name: Rodar Trivy no c√≥digo-fonte
        run: trivy fs . --exit-code 0 --severity HIGH,CRITICAL --skip-dirs .git,node_modules -f json -o trivy-report.json



  dependency-check:
    name: OWASP Dependency-Check
    runs-on: ubuntu-latest
    steps:
      - name: Cache do OWASP Dependency-Check
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-dependency-check
          restore-keys: |
            ${{ runner.os }}-dependency-check
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Executar OWASP Dependency-Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.1/dependency-check-8.4.1-release.zip
          unzip dependency-check-8.4.1-release.zip
          
          # Desativar logging para evitar erro no logback.xml
          export SUPPRESS_LOGGING=true
          
          dependency-check/bin/dependency-check.sh --scan . --format HTML --out reports || echo "‚ö†Ô∏è Dependency-Check falhou, mas o pipeline continuar√°..."
